<!-- Copyright 2021 Crystal Ferrai

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. -->

<UserControl
    x:Class="SwptSaveEditor.Document.SaveDocumentView"
    x:ClassModifier="internal"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:root="clr-namespace:SwptSaveEditor"
    xmlns:local="clr-namespace:SwptSaveEditor.Document"
    xmlns:conv="clr-namespace:SwptSaveEditor.Converters"
    xmlns:b="clr-namespace:SwptSaveEditor.Behaviors"
    xmlns:c="clr-namespace:SwptSaveEditor.Controls"
    xmlns:u="clr-namespace:SwptSaveEditor.Utils"
    mc:Ignorable="d"
    FocusManager.FocusedElement="{Binding ElementName=PropertyGrid}"
    d:DataContext="{d:DesignInstance Type={x:Type local:SaveDocument}, IsDesignTimeCreatable=True}">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Tab toolbar -->
        <Border
            Background="#fff8f8f8"
            Padding="4">
            <Border.Resources>
                <Style
                    TargetType="{x:Type Separator}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate
                                TargetType="{x:Type Separator}">
                                <Border
                                    Margin="2 0"
                                    Width="1"
                                    VerticalAlignment="Stretch"
                                    Background="#ffa0a0a0"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style
                    x:Key="BorderlessButton"
                    TargetType="{x:Type Button}">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderThickness" Value="0" />
                </Style>
            </Border.Resources>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <ContentPresenter
                    Content="{Binding UndoAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

                <ContentPresenter
                    Grid.Column="2"
                    Content="{Binding RedoAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

                <Separator
                    Grid.Column="4" />

                <ContentPresenter
                    Grid.Column="6"
                    Content="{Binding SaveAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

                <ContentPresenter
                    Grid.Column="8"
                    Content="{Binding ReloadAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

                <!-- * -->

                <Grid
                    Grid.Column="10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="5" />
                        <ColumnDefinition Width="100" />
                        <ColumnDefinition Width="2" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <TextBlock
                        VerticalAlignment="Center"
                        Text="Filter" />

                    <TextBox
                        x:Name="FilterTextBox"
                        Grid.Column="2"
                        ToolTip="{Binding FilterAction.ToolTip}"
                        Text="{Binding PropertyFilter, UpdateSourceTrigger=PropertyChanged}" />

                    <ContentPresenter
                        Grid.Column="4"
                        Content="{Binding ClearFilterAction}"
                        Style="{StaticResource ToolbarButtonStyle}" />

                </Grid>

                <Separator
                    Grid.Column="12" />

                <ContentPresenter
                    Grid.Column="14"
                    Content="{Binding RenamePropertyAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

                <Separator
                    Grid.Column="16" />

                <ContentPresenter
                    Grid.Column="18"
                    Content="{Binding CopyPropertyAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

                <ContentPresenter
                    Grid.Column="20"
                    Content="{Binding PastePropertyAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

                <Separator
                    Grid.Column="22" />

                <ContentPresenter
                    Grid.Column="24"
                    Content="{Binding MovePropertyUpAction}">
                    <ContentPresenter.Style>
                        <Style
                            TargetType="{x:Type ContentPresenter}"
                            BasedOn="{StaticResource ToolbarButtonStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding DataContext.CanMoveProperties, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" Value="False">
                                    <Setter Property="ToolTip">
                                        <Setter.Value>
                                            <TextBlock>
                                                <Run Text="{Binding ToolTip, Mode=OneWay}" /><LineBreak /><Run FontStyle="Italic" Text="Properties must be unsorted and unfiltered" />
                                            </TextBlock>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContentPresenter.Style>
                </ContentPresenter>

                <ContentPresenter
                    Grid.Column="26"
                    Content="{Binding MovePropertyDownAction}">
                    <ContentPresenter.Style>
                        <Style
                            TargetType="{x:Type ContentPresenter}"
                            BasedOn="{StaticResource ToolbarButtonStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding DataContext.CanMoveProperties, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" Value="False">
                                    <Setter Property="ToolTip">
                                        <Setter.Value>
                                            <TextBlock>
                                                <Run Text="{Binding ToolTip, Mode=OneWay}" /><LineBreak /><Run FontStyle="Italic" Text="Properties must be unsorted and unfiltered" />
                                            </TextBlock>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContentPresenter.Style>
                </ContentPresenter>

                <Separator
                    Grid.Column="28" />

                <ContentPresenter
                    Grid.Column="30"
                    Content="{Binding AddPropertyAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

                <ContentPresenter
                    Grid.Column="32"
                    Content="{Binding RemovePropertyAction}"
                    Style="{StaticResource ToolbarButtonStyle}" />

            </Grid>
        </Border>

        <!-- Tab data -->
        <DataGrid
            x:Name="PropertyGrid"
            Grid.Row="1"
            AutoGenerateColumns="False"
            FontFamily="Courier New"
            CanUserReorderColumns="False"
            CanUserAddRows="False"
            CanUserDeleteRows="False"
            CanUserResizeColumns="True"
            CanUserResizeRows="False"
            SelectionMode="Single"
            SelectionUnit="FullRow"
            HeadersVisibility="Column"
            BeginningEdit="PropertyGrid_BeginningEdit"
            RowEditEnding="PropertyGrid_RowEditEnding"
            b:DataGridBehavior.UseThreeStateSort="True"
            b:DataGridBehavior.IsSaveValueColumn="True"
            Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}"
            ItemsSource="{Binding Properties}"
            SelectedIndex="{Binding SelectedPropertyIndex, Mode=TwoWay}">
            <DataGrid.Resources>
                <u:BindingProxy
                    x:Key="GridBindingProxy"
                    Context="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                <Style
                    x:Key="ReadOnlyColumnStyle"
                    TargetType="{x:Type DataGridCell}">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Background" Value="#fff0f0f0" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Resources>
            <DataGrid.Style>
                <Style
                    TargetType="{x:Type DataGrid}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding SuppressInputActions}" Value="False">
                            <Setter Property="ContextMenu">
                                <Setter.Value>
                                    <ContextMenu
                                        ItemsSource="{Binding ContextMenuItems}">
                                        <ContextMenu.Resources>
                                            <Image
                                                x:Key="MenuIcon"
                                                x:Shared="False"
                                                Stretch="None"
                                                Source="{Binding Icon}"
                                                Style="{StaticResource ImageEnableStyle}" />
                                        </ContextMenu.Resources>
                                        <ContextMenu.ItemContainerStyle>
                                            <Style
                                                TargetType="{x:Type MenuItem}">
                                                <Setter Property="Command" Value="{Binding Command}" />
                                                <Setter Property="Icon" Value="{StaticResource MenuIcon}" />
                                                <Setter Property="Header" Value="{Binding Name}" />
                                                <Setter Property="InputGestureText" Value="{Binding Shortcut}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate>
                                                                    <Separator />
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContextMenu.ItemContainerStyle>
                                    </ContextMenu>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Style>
            <DataGrid.Columns>
                <DataGridTextColumn
                    Header="Name"
                    Width="Auto"
                    IsReadOnly="True"
                    CellStyle="{StaticResource ReadOnlyColumnStyle}"
                    Binding="{Binding Name}"
                    SortDirection="{Binding Context.NameSortDirection, Source={StaticResource GridBindingProxy}, Mode=TwoWay}" />
                <c:BindingDataGridTemplateColumn
                    Header="Value"
                    Width="*"
                    MinWidth="100"
                    CanUserSort="False"
                    Binding="{Binding Value}"
                    CellTemplateSelector="{x:Static root:SaveValueTemplateSelector.Instance}"
                    CellEditingTemplateSelector="{x:Static root:SaveValueTemplateSelector.EditInstance}" />
                <DataGridTextColumn
                    Header="Type"
                    Width="Auto"
                    IsReadOnly="True"
                    CellStyle="{StaticResource ReadOnlyColumnStyle}"
                    Binding="{Binding Value.DisplayType}"
                    SortDirection="{Binding Context.TypeSortDirection, Source={StaticResource GridBindingProxy}, Mode=TwoWay}" />
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>
